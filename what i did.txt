Le projet "Pillage" que j'ai mené à bien lors de mon stage de deuxième année en BUT Informatique consistait en la création et la gestion d'un site web dédié aux packages pour un framework interne. Initialement conçu comme un cache du site Subversion interne, il a été transformé en une plateforme autonome, comparable à Github mais spécifiquement adaptée à SVN pour leur framework.

Mon objectif principal durant ce projet était de migrer le site depuis RedHat 7 vers RedHat 8, de mettre à jour la version de Python de 3.7 à 3.10, tout en assurant la mise à jour des packages, ainsi que de migrer la base de données de SQLite vers MariaDB. En parallèle, j'ai dû résoudre plusieurs problèmes d'application et apporter des améliorations en plus d'optimiser le code Cette migration est nécessaire car dans une entreprise de cette taille, il est nécessaire de normaliser tout cela et il a donc été décidé d'utiliser la version 3.10 de python sur RedHat 8.

Pour donner un peut de contexte, avant mon intervention, lorsque une release d'un package étais faite sur Jenkins, elle étais releasé sur Codex, qui est une implémentation de la solution Tuleap en interne de ST puis quand un utilisateur avais besoin d'un package, il étais téléchargé sur pillage. à terme, le job Jenkins permettant de faire la release d'un package pourra être lancée depuis pillage puis Jenkins, releasera le package sur Codex et sur Pillage.

Une des deux grosses taches lors de ce projet à été de Créer une API REST. La création de cette API REST avais plusieurs roles, notament, elle a permis d'accélérer le site pour lui permettre d'aller chercher des données après les render des pages en plus de donner la possibilité a des personnes d'utiliser le site uniquement en REST API pour récupérer des données. Cela permetra aussi à terme à Jenkins par le biais d'un script python de directement remplir la base de données de l'application web. 

Pillage possédais déjà une API mais elle ne permetais pas de faire grand chose et à du être gardée pour des raisons de legacy avec d'autre application. Pour la création de cette API, j'ai utilisé Swagger pour créer une documentation de ladite API et qui permet de tester directement l'API sur le site. Cette API m'a aussi permis d'implémenter une fonctionnalité critique.

Le site, allans être utilisé a plusieurs endroits dans le monde, notament dans des endroits pouvant avoir une connexion internet faible et non stable (qui peut se couper de manière intenpestive), j'ai implémenté une fonction d'UPLOAD en chunk. Cette fonctionalité permet d'uploader des bouts de fichiers et à la fin, recréer automatiquement le fichier. L'algorithme MD5 est utilisé pour vérifier l'intégrité des chunk et à la fin, l'intégrité du fichier entier un modèle permet de connaitre le status du fichier et les informations données . Cette fonctionalité ne l'est pas encore mais devra être dupliqué pour permettre le download en chunk pour les mêmes raison.

Lors de ce stage, j'ai fixé de nombreux bugs et implémenté plusieurs fonctionnalitées. Notament sur la page principale, j'ai fait en sorte que il y ai une fonction d'automplétion 

Lors de mon stage, j'ai commencé par me balader sur le site et corriger un maximum de bugs avant de faire de plus grosse modification pour avoir une bonne base, j'ai ensuite fait toute les modification du site puis ai fini par développer l'API. Après l'API, j'ai passé la majorité du temps à repasser sur les pages avec des profilers (notament google lighthouse) pour améliorer les performances du site web.

j'ai réalisé des tests unitaires grâce aux modules de tests de Django pour la majorité des routes de mon API et notament pour la route d'upload qui est la plus critique.

pour plus de sécurité, chaque utilisation de l'API doit être faite en étant connecté et chaque requête est loggé dans la base de données.

J'ai du repasser dans la BDD pour normaliser des données et supprimer des données dupliqées 



Le passage de ce site web vers RedHat 8 en python 3.10 étais nécessaire car dans un but d'uniformisation des projets, il a été décidé que la version 3.10 de python serais celle utilisé pour tout les projet. Mon travail à d'abord été de faire une migration de python vers python 3.10 et dans un même temps m'a permis de mettre à jour la quasi majorité des packages dans une version stable plus récente.

Ne conaissant pas Django avant le stage, j'ai alors du me former via le biais de tutoriel en ligne, mais grâce à mes conaissances antérieurs notament avec mon expérience avec Vuejs, nodejs, Flask, python et Jinja,  il a été assez facile d'utiliser Django.


L'application web permet de faire de nombreuses choses.
Tout d'abord, la page d'accueil continent une petite liste des 10 derniers packages, une des 10 packages modifiés le plus récemment et les 10 packages les plus référencés. Il y a aussi une barre de recherche avec autocomplétion comme dit avant.

Il y a ensuite une page de recherche qui permet de visualiser et de filtrer des packages. Cette page est utilisée de nombreuses fois dans le site pour les même raisons (voir des package en fonction de groupe, tag, auteur,...)

chaque package à sa propre page qui permet de copier sur Druid, un logiciel interne, il est aussi possible de mettre en favori un package, il y a de nombreux liens  vers d'autres pages, il y a des statistiques, il est possible de voir toute les releases d'un package et pour chaque page pour les releases, il est possible de voir les dépenddents et dépendences. en cliquant sur un bouton, il est possible de générer un arbre de nodes de dépendences ou de dépendents.

il est possible de voir tout les packages auxquels on a participé, il est possible de voir sa liste de favori, il est possible de voir ses données personnelles.

j'ai revu les modèles de la base de données pour en faire de plus adaptés, ou juste rajotuer des informations




pour donner un peu de contexte, ce projet à été réalisé dans l'entreprise ST, dans l'équipe CAD de la division Imaging. Lors de ce stage j'ai du travailler sur